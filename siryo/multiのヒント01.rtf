{\rtf1\ansi\ansicpg932\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset128 HiraKakuProN-W3;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;}
\paperw11900\paperh16840\margl1140\margr1140\margb1140\margt1140\vieww12600\viewh7800\viewkind0
\deftab567
{\*\background {\shp{\*\shpinst\shpleft0\shptop0\shpright0\shpbottom0\shpfhdr0\shpbxmargin\shpbymargin\shpwr0\shpwrk0\shpfblwtxt1\shpz0\shplid1025{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 16645629}}{\sp{\sn fFilled}{\sv 1}}{\sp{\sn lineWidth}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn bWMode}{\sv 9}}{\sp{\sn fBackground}{\sv 1}}}}}
\pard\tx567\tx1134\tx1701\tx2268\tx2835\tx3402\tx3969\tx4536\tx5103\tx5670\tx6237\tx6804\pardeftab567\pardirnatural

\f0\fs24 \cf0 \

\f1 \'8c\'b3\'81\'46
\f0 \
\
http://groups.google.com/group/openni-dev/browse_thread/thread/c307fdc34c5640b7/a7ed6eeca576d210?hl=ja&q=openni+xtion+multiple+depth#a7ed6eeca576d210\
\
\
I was able to get this working - but only after adjusting some code in \uc0\u8232 the OpenNI.net project and rebuilding the library. In the Context.cs I \u8232 forced it to return a depth node with the handle:\
\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 public ProductionNode CreateProductionTree(NodeInfo nodeInfo) \uc0\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \{ \u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 IntPtr nodeHandle; \u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 int status = \u8232 \cf2 SafeNativeMethods.xnCreateProductionTree(this.InternalObject, \uc0\u8232 nodeInfo.InternalObject, out nodeHandle); \cf0 \uc0\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 WrapperUtils.ThrowOnError(status); \u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 return CreateProductionNodeObject(nodeHandle, NodeType.Depth); // \u8232 this line was changed to force a depth node returned \u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \} \
This is a hack for now - I hope that OpenNI folks will adjust the code \uc0\u8232 so it returns a valid handle when creating a production tree in C# in \u8232 future releases! thanks so much! \
I am including this solution in return for all the great tips I have \uc0\u8232 gotten from this group! "Many Bothans died to bring us this \u8232 information..." \
globalContext = new Context(); \uc0\u8232 NodeInfoList deviceList = \u8232 globalContext.EnumerateProductionTrees(NodeType.Depth, null); \
int deviceCounter = 0; \
foreach (NodeInfo foundNodeInfo in deviceList) \{ \uc0\u8232 	if (deviceCounter == 0) // only activates first sensor if you choose 0 \{ \u8232 \'a0		if (!context0Initiated) \{ \
		context0Initiated = true; \
		myProductor0 = globalContext.CreateProductionTree(foundNodeInfo); \
	\} else if (deviceCounter == 1) // only turns on second device if you use \uc0\u8232 3 when enumerating type device, use 1 when enumerating type depth \u8232 	\{ \u8232 		if (!context1Initiated) \{ \u8232 			context1Initiated = true; \u8232 			myProductor1 = globalContext.CreateProductionTree(foundNodeInfo); \u8232 		\} \
	\} \
\
	deviceCounter += 1; \
\
\} \
\
depth0 = globalContext.GetProductionNodeByName("Depth1") as \
DepthGenerator; \
depth1 = globalContext.GetProductionNodeByName("Depth2") as \
DepthGenerator; \
globalContext.StartGeneratingAll(); \
in a separate loop I then use: \
globalContext.WaitAnyUpdateAll(); \uc0\u8232 depth0.GetMetaData(depthMD0); \u8232 depth1.GetMetaData(depthMD1); \
to grab data from cameras.\
}